import streamlit as st
import pandas as pd
import math
import matplotlib.pyplot as plt

# Sidebar Navigation
page = st.sidebar.selectbox("Select Page", ["Estimator", "Materials Summary"])
if page == "Estimator":
    st.title("Concrete, Rebar, XPS, Drain & Finish Takeoff Tool")

    project_name = st.text_input("Project Name")
    estimator_name = st.text_input("Estimator")

    component = st.selectbox("Component Type", [
        "Foundation Wall", "Linear Footing", "Spread Footing",
        "Interior Slab", "Garage Slab", "Exterior Flatwork",
        "French Drain", "Big Foot Pier", "Sono Tube",
        "XPS Insulation", "Vapor Barrier", "Flatwork Finish", "Concrete Jump"
    ])

    length_ft = st.number_input("Length (ft)", min_value=0.0, value=0.0)
    height_ft = st.number_input("Height / Depth (ft)", min_value=0.0, value=0.0)
    thickness_in = st.number_input("Thickness (inches)", min_value=0.0, value=0.0)
    area_override = st.number_input("Square Footage Override (for slabs)", min_value=0.0, value=0.0)
    qty = st.number_input("Quantity (if applicable)", min_value=1, value=1)
    include_overage = st.checkbox("Apply 10% overage for structural / 5% for slabs", value=True)

    # Rebar Spacing
    wall_spacing_in = st.selectbox("Wall Rebar Spacing (in)", [12, 18, 24])
    slab_spacing_in = st.selectbox("Slab Rebar Spacing (in)", [12, 18, 24])

    # XPS Foam
    include_xps = st.checkbox("Include XPS Foam for Component", value=False)
    xps_r_value = st.selectbox("XPS R-Value", ["R-5", "R-10"])
    xps_price = 1.5 if xps_r_value == "R-5" else 3.0

    # Pricing
    st.markdown("### Pricing")
    concrete_zone = st.selectbox("Concrete Zone", ["Zone A - $185", "Zone B - $195", "Zone C - $205", "Zone D - $215"])
    concrete_price_per_cy = int(concrete_zone.split("$")[-1])
    rebar_price_per_ft = st.selectbox("Rebar Pricing", ["#4 - $0.45", "#5 - $0.55", "#6 - $0.60"])
    rebar_cost = float(rebar_price_per_ft.split("$")[-1])
    material_markup = st.slider("Material Markup %", min_value=0, max_value=50, value=25)

    finish_price = st.selectbox("Flatwork Finish Rate (per SF)", [
        "$8.25", "$8.50", "$8.75", "$9.00", "$9.25", "$9.50", "$10.00"
    ])
    finish_rate = float(finish_price.replace("$", ""))

    vapor_options = {
        "Stego 6 mil": 0.18,
        "Stego 10 mil": 0.25,
        "10 mil plastic": 0.12,
        "5 mil plastic": 0.09
    }
    vapor_type = st.selectbox("Vapor Barrier Type", list(vapor_options.keys()))
    vapor_price = vapor_options[vapor_type]

    if st.button("Calculate"):
        # Calculation block (coming next message!)
        pass
# Main Calculation Logic
if page == "Estimator" and st.session_state.get("takeoff_data") is None:
    st.session_state.takeoff_data = pd.DataFrame()

if page == "Estimator" and "Calculate" in st.session_state:
    st.session_state.takeoff_data = pd.concat([st.session_state.takeoff_data, result], ignore_index=True)

if page == "Estimator":
    if "takeoff_data" not in st.session_state:
        st.session_state.takeoff_data = pd.DataFrame()

    if st.button("Add to Project Dataset"):
        st.session_state.takeoff_data = pd.concat([st.session_state.takeoff_data, result], ignore_index=True)

    if not st.session_state.takeoff_data.empty:
        st.markdown("## Project Takeoff Summary")
        st.dataframe(st.session_state.takeoff_data)
        st.download_button("Download CSV", st.session_state.takeoff_data.to_csv(index=False), file_name="takeoff_dataset.csv")

# ðŸ“‹ MATERIALS SUMMARY TAB
if page == "Materials Summary":
    st.title("ðŸ“¦ Materials & Concrete Summary")

    if "takeoff_data" not in st.session_state or st.session_state.takeoff_data.empty:
        st.warning("No takeoff data available yet. Please add items first in the Estimator tab.")
    else:
        df = st.session_state.takeoff_data

        st.subheader("Concrete Volumes")
        st.write("**Footings (CF, CY)**")
        footings_cy = df[df["Component"].str.contains("Footing", case=False)]["Concrete_CY"].sum()
        walls_cy = df[df["Component"] == "Foundation Wall"]["Concrete_CY"].sum()
        slabs_cy = df[df["Component"].str.contains("Slab", case=False)]["Concrete_CY"].sum()
        exterior_cy = df[df["Component"] == "Exterior Flatwork"]["Concrete_CY"].sum()
        patios_cy = df[df["Component"] == "Patio"]["Concrete_CY"].sum()
        spread_footings_cy = df[df["Component"] == "Spread Footing"]["Concrete_CY"].sum()

        st.metric("Footings CY", round(footings_cy, 2))
        st.metric("Foundation Walls CY", round(walls_cy, 2))
        st.metric("Interior Slabs CY", round(slabs_cy, 2))
        st.metric("Exterior Flatwork CY", round(exterior_cy, 2))
        st.metric("Patios CY", round(patios_cy, 2))
        st.metric("Spread Footings CY", round(spread_footings_cy, 2))

        st.subheader("Materials Inventory")
        big_foot_total = df[df["Component"] == "Big Foot Pier"]["Quantity"].sum()
        sono_tube_total = df[df["Component"] == "Sono Tube"]["Quantity"].sum()
        jumps_total = df[df["Component"] == "Concrete Jump"]["Quantity"].sum()
        wire_ties = 1
        stakes_24 = 1
        stakes_16 = 1
        stakes_36 = 1

        st.metric("Big Foot Piers", int(big_foot_total))
        st.metric("Sono Tubes", int(sono_tube_total))
        st.metric("Concrete Jumps", int(jumps_total))
        st.metric("6\" Wire Tie Rolls", wire_ties)
        st.metric("24\" Wood Bundles", stakes_24)
        st.metric("16\" Wood Stakes Bundles", stakes_16)
        st.metric("36\" Concrete Stakes Bundles", stakes_36)

        st.subheader("Dobies for Rebar")
        total_rebar_ft = df["Rebar_LF"].sum()
        dobies_footings = (total_rebar_ft / 10) * 2
        dobies_flatwork = (df["XPS_SF"].sum() / 100) * 4
        st.metric("Dobies Footings", int(dobies_footings))
        st.metric("Dobies Flatwork", int(dobies_flatwork))

        st.subheader("Cost Summary")
        materials_cost = df["Total_Cost"].sum()
        sale_total = df["Sale_Price"].sum()
        margin_amount = sale_total - materials_cost
        margin_percent = (margin_amount / sale_total) * 100 if sale_total else 0

        st.metric("Total Material Cost", f"${round(materials_cost,2):,}")
        st.metric("Total Sale Price", f"${round(sale_total,2):,}")
        st.metric("Profit Margin", f"${round(margin_amount,2):,} ({round(margin_percent,1)}%)")

